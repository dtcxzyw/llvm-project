; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt < %s -passes='default<O3>' -mcpu=generic -S | FileCheck %s

; C version of test case
; int pr68282() {
;     int outputValue = 0;
;     for (int x = 0; x < 1024 * 1024; ++x) {
;         outputValue += outputValue + 0;
;         outputValue += outputValue + 1;
;         outputValue += outputValue + 2;
;         outputValue += outputValue + 3;
;         outputValue += outputValue + 4;
;         outputValue += outputValue + 5;
;         outputValue += outputValue + 6;
;         outputValue += outputValue + 7;
;     }
;     return outputValue;
; }

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define i32 @pr68282() {
; CHECK-LABEL: define i32 @pr68282(
; CHECK-SAME: ) local_unnamed_addr #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 -134744073
;
entry:
  br label %for.cond

for.cond:
  %outputValue.0 = phi i32 [ 0, %entry ], [ %add15, %for.body ]
  %x.0 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %cmp = icmp slt i32 %x.0, 1048576
  br i1 %cmp, label %for.body, label %for.cond.cleanup

for.cond.cleanup:
  ret i32 %outputValue.0

for.body:
  %add1 = add nsw i32 %outputValue.0, %outputValue.0
  %add2 = add nsw i32 %add1, 1
  %add3 = add nsw i32 %add1, %add2
  %add4 = add nsw i32 %add3, 2
  %add5 = add nsw i32 %add3, %add4
  %add6 = add nsw i32 %add5, 3
  %add7 = add nsw i32 %add5, %add6
  %add8 = add nsw i32 %add7, 4
  %add9 = add nsw i32 %add7, %add8
  %add10 = add nsw i32 %add9, 5
  %add11 = add nsw i32 %add9, %add10
  %add12 = add nsw i32 %add11, 6
  %add13 = add nsw i32 %add11, %add12
  %add14 = add nsw i32 %add13, 7
  %add15 = add nsw i32 %add13, %add14
  %inc = add nsw i32 %x.0, 1
  br label %for.cond
}
